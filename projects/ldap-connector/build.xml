<?xml version="1.0" encoding="UTF-8"?>
<project name="ldap-connector" default="build" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property file="${user.home}/google-enterprise-connector-ldap.properties" />
  <property file="version.properties" />

  <propertyset id="javatest.properties">
    <propertyref prefix="javatest."/>
    <mapper type="glob" from="javatest.*" to="*"/>
  </propertyset>

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />
  <property name="COMPILE_TARGET" value="1.6" />
  <property name="COMPILE_BOOTCLASSPATH" value="${build.bootclasspath}" />

  <property name="downloads.dir" location="downloads" />
  <property name="build.dir" value="build" />
  <property name="build-prod.dir" value="${build.dir}/prod" />
  <property name="build-prod-config.dir" value="${build-prod.dir}/config" />
  <property name="build-tests.dir" value="${build.dir}/tests" />
  <property name="third-party.dir" value="third_party" />

  <property name="classes-prod.dir" value="${build-prod.dir}/classes" />
  <property name="classes-tests.dir" value="${build-tests.dir}/classes" />

  <property name="connector-manager.dir"
            location="${connector-manager-projects.dir}/connector-manager" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/dist/jarfile" />
  <property name="connector-manager-thirdparty-jar.dir"
    location="${connector-manager-projects.dir}/connector-manager/third-party" />

  <property name="config.dir" value="config" />

  <property name="src-prod.dir" value="source/java" />
  <property name="src-tests.dir" value="source/javatests" />

  <property name="jar-prod.dir" value="${build-prod.dir}/jar" />
  <property name="jar-prod.file" value="${jar-prod.dir}/connector-ldap.jar" />

  <property name="jar-tests.dir" value="${build-tests.dir}/jar" />
  <property name="jar-tests.file" value="${jar-tests.dir}/connector-ldap-tests.jar" />

  <property name="zip.dir" value  = "${build.dir}/file" />
  <property name="config-zip.dir" value  = "${zip.dir}/Config" />
  <property name="lib-zip.dir" value  = "${zip.dir}/Lib" />

  <!-- Paths -->
  <path id="compile.prod.classpath">
    <fileset dir="${spi.jar.dir}" includes="**/connector-spi.jar" />
    <fileset dir="${connector-manager-thirdparty-jar.dir}">
      <include name="prod/*.jar" />
    </fileset>
  </path>

  <path id="compile.tests.classpath">
    <path refid="compile.prod.classpath" />
    <fileset dir="${spi.jar.dir}" includes="**/connector.jar" />
    <fileset dir="${third-party.dir}" includes="**/*.jar" />
    <fileset file="${jar-prod.file}" />
    <fileset dir="${connector-manager-thirdparty-jar.dir}">
      <include name="tests/junit.jar" />
    </fileset>
  </path>

  <!--Cobertura properties -->
  <property file="${config.dir}/build_code_coverage.properties" />
  <path id="cobertura.classpath">
    <fileset dir="${connector-manager-thirdparty-jar.dir}/cobertura">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <include file="${connector-manager-projects.dir}/svnbuild.xml" as="svn"/>

  <target name="build" depends="init,compile,compile_tests,jar" />

  <target name="init">
    <tstamp />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build-prod.dir}" />
    <mkdir dir="${build-prod-config.dir}" />
    <mkdir dir="${jar-prod.dir}" />
    <mkdir dir="${classes-prod.dir}" />
    <mkdir dir="${classes-tests.dir}" />
    <mkdir dir="${jar-tests.dir}" />
  </target>

  <target name="compile" depends="init">
    <!-- compile java source files -->
    <javac srcdir="${src-prod.dir}" destdir="${classes-prod.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <compilerarg line="-Xlint -Xlint:-serial"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.prod.classpath"/>
    </javac>
  </target>

  <target name="jar" description="Build ${jar-prod.file}"
          depends="compile,svn.svn-branch-version">
    <jar jarfile="${jar-prod.file}">
      <fileset dir="${classes-prod.dir}"/>
      <fileset dir="source/java" includes="**/*.properties"/>
      <fileset dir="${config.dir}/prod/config/.." includes="config/*.xml"/>
      <manifest>
        <attribute name="Implementation-Title"
                   value="Google Search Appliance Connector for LDAP"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svn.branch.version} ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.ldap.LdapMain" />
      </manifest>
    </jar>
  </target>

  <target name="compile_tests" depends="init,jar">
    <!-- compile java source files for tests -->
    <javac srcdir="${src-tests.dir}" destdir="${classes-tests.dir}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}"
           debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- CM JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath refid="compile.tests.classpath"/>
    </javac>
    <copy todir="${classes-tests.dir}">
      <fileset dir="${src-tests.dir}">
          <include name="**/xhtml*" />
      </fileset>
    </copy>
  </target>

  <target name="run_tests">
    <echo message="The run_tests target is deprecated. Use test instead." />
  </target>

  <target name="test" depends="compile_tests,jar,instrument">
    <mkdir dir="${classes-tests.dir}/com/google/enterprise/connector/ldap/config"/>

    <copy todir="${classes-tests.dir}/com/google/enterprise/connector/ldap/config" >
      <fileset dir="${config.dir}" />
    </copy>

    <property name="test.suite" value="*"/>

    <junit printsummary="yes" haltonfailure="no"
           failureproperty="${ant.project.name}.failure">
      <assertions><enable/></assertions>
      <!--
          The instrumented classes reference classes used by the
          Cobertura runtime, so Cobertura and its dependencies
          must be on your classpath.
      -->
      <classpath>
        <pathelement location="${instrumented.dir}" />
        <path refid="cobertura.classpath" />
        <path refid="compile.tests.classpath"/>
        <pathelement location="${classes-tests.dir}" />
      </classpath>
      <syspropertyset refid="javatest.properties"/>
      <formatter type="xml" />
      <formatter type="brief" usefile="no"/>
      <batchtest todir="${reports.xml.dir}">
        <fileset dir="${test.dir}">
          <include name="**/${test.suite}Test.java" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>

    <fail if="${ant.project.name}.failure" message="Test failure"/>
  </target>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build.dir}" />
  </target>

  <!-- Cobertura Tasks -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>

  <target name="compile_code_coverage" 
          depends="init_code_coverage,compile,compile_tests"/>

  <target name="instrument" depends="compile_code_coverage">
    <!--
        Remove the coverage data file and any old instrumentation.
    -->
    <delete file="cobertura.ser"/>
    <!-- <delete dir="${instrumented.dir}" /> -->

    <cobertura-instrument todir="${instrumented.dir}">
      <!--
          The following line causes instrument to ignore any
          source line containing a reference to log4j, for the
          purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <!-- Cobertura needs prod class dependencies during instrumentation. -->
      <auxClassPath refid="compile.prod.classpath"/>

      <!--
	  Instrument all the application classes, but
	  don't instrument the test classes.
      -->
      <fileset dir="${classes-prod.dir}">
        <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage-report">
    <!--
        Generate an XML file containing the coverage data using
        the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!--
        Generate a series of HTML files containing the coverage
        data in a user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>


  <target name="clean_code_coverage"
          description="Remove all files created by the build/test process.">
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>

  <target name="init-downloads" depends="svn.svn-branch">
    <property name="downloads.prefix" value="connector-ldap-${svn.branch}" />
    <property name="repackage.prefix" value="connector-ldap-${version}"/>

    <mkdir dir="${downloads.dir}" />
  </target>

  <target name="downloads" depends="jar,init-downloads">
    <property name="bin.archive" value="${downloads.prefix}" />
    <zip destfile="${downloads.dir}/${bin.archive}.zip">
      <zipfileset dir="${jar-prod.dir}" 
        prefix="${bin.archive}" />
        <zipfileset file="../../RELEASE_NOTES" 
           prefix="${bin.archive}" />
        <zipfileset file="config/logging.properties"
           prefix="${bin.archive}/Config" />
        <zipfileset file="../../COPYING" 
           prefix="${bin.archive}/License" />
    </zip>
    <checksum algorithm="SHA-1" file="${downloads.dir}/${bin.archive}.zip"/>

    <archive-source downloads.dir="${downloads.dir}"
                    downloads.prefix="${downloads.prefix}" />
  </target>

  <target name="repackage" depends="init-downloads"
          description="Repackage release candidate files for release.">
    <repackage-downloads downloads.dir="${downloads.dir}"
                         downloads.prefix="${downloads.prefix}"
                         repackage.prefix="${repackage.prefix}" />
  </target>

  <target name="run_code_coverage" depends="test,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

  <target name="everything" depends="clean,build,test,downloads"
          description="clean, build, test, downloads" />

</project>
